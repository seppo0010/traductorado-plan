import { GraphData } from './plan'

const subjectsRect = {
  1: [292, 142, 153, 69],
  2: [292, 219, 153, 69],
  3: [292, 296, 153, 69],
  4: [292, 296+76, 153, 69],
  5: [292, 296+76*2, 153, 69],
  6: [292, 296+76*3, 153, 69],
  7: [466, 142, 153, 69],
  8: [466, 219, 153, 69],
  9: [466, 296+76, 153, 69],
  10: [466, 296+76*3, 153, 69],
  11: [466+174, 217, 153, 69],
  12: [466+174, 293, 153, 69],
  13: [466+174, 296+75, 153, 69],
  14: [466+174, 296+74*2+3, 153, 69],
  15: [885, 142, 153, 69],
  16: [885, 216, 153, 69],
  17: [885, 335, 153, 69],
  18: [885, 446, 153, 69],
  19: [1059, 142, 153, 69],
  20: [1059, 219, 153, 69],
  21: [1059, 296, 153, 69],
  22: [1059, 297+75, 153, 69],
  23: [292, 662, 153, 69],
  24: [292, 662+77, 153, 69],
  25: [292, 662+77*2, 153, 69],
  26: [466, 702, 153, 69],
  27: [466, 778, 153, 69],
  28: [680, 662, 153, 69],
  29: [680, 662+77, 153, 69],
  30: [680, 662+77*2, 153, 69],
  31: [884, 738, 153, 69],
  32: [884, 815, 153, 69],
};
const canDo = (subject: number | string, checked: Set<string>, graphData: GraphData) => {
  subject = subject.toString()
  if (checked.has(subject)) {
    return false;
  }
  const requirements = graphData.edges.filter((e) => e.to.toString() === subject).map((e) => e.from.toString())
  return requirements.every((requirement) => checked.has(requirement))
}
export { subjectsRect, canDo };
